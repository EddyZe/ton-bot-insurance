package ru.eddyz.telegrambot.commands.impls;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.send.SendVideo;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;
import ru.eddyz.telegrambot.commands.PublishHistoryCommand;
import ru.eddyz.telegrambot.domain.entities.History;
import ru.eddyz.telegrambot.domain.entities.HistoryFile;
import ru.eddyz.telegrambot.domain.enums.HistoryStatus;
import ru.eddyz.telegrambot.repositories.HistoryRepository;
import ru.eddyz.telegrambot.util.InlineKey;
import ru.eddyz.telegrambot.util.Sender;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;


@Slf4j
@Component
@RequiredArgsConstructor
public class PublishHistoryCommandImpl implements PublishHistoryCommand {

    private final HistoryRepository historyRepository;
    private final TelegramClient telegramClient;
    private final InlineKey inlineKey;

    @Value("${telegram.group_telegram_id}")
    private Long groupId;

    @Value("${insurance.vote_period}")
    private Integer votePeriod;

    @Override
    public void execute(CallbackQuery callbackQuery) {
        var chatId = callbackQuery.getMessage().getChatId();
        var splitData = callbackQuery.getData().split(":");
        answerCallback(callbackQuery.getId());
        try {
            var id = Long.parseLong(splitData[1]);
            var historyOp = historyRepository.findById(id);

            if (historyOp.isEmpty()) {
                sendMessage(chatId, "‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!", null);
                return;
            }

            var history = historyOp.get();

            if (history.getHistoryStatus() != HistoryStatus.AWAITING_PUBLISH) {
                sendMessage(chatId, "‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", null);
                return;
            }

            if (history.getAmount() < 1) {
                sendMessage(chatId, "‚ùó –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é, —Ü–µ–Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–≤–Ω–∞ 0", null);
                return;
            }

            sendHistory(history.getId(), chatId);
        } catch (NumberFormatException e) {
            log.error("Error parsing to number from string PublishHistoryCommandImpl", e);
        }
    }

    private void sendHistory(Long historyId, Long chatId) {
        Thread.startVirtualThread(() -> {
            var historyOp = historyRepository.findById(historyId);

            if (historyOp.isEmpty()) {
                sendMessage(chatId, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –í–æ–∑–º–æ–∂–Ω–æ –∏—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!", null);
                return;
            }

            var history = historyOp.get();

            try {
                sendHistory(history);
            } catch (Exception e) {
                sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É!", null);
                return;
            }

            history.setUpdatedAt(LocalDateTime.now());
            history.setHistoryStatus(HistoryStatus.PUBLISH);
            historyRepository.save(history);
            sendMessage(chatId, "üéâ –ò—Å—Ç–æ—Ä–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!", null);
            try {
                Thread.sleep(Duration.of(votePeriod, ChronoUnit.MINUTES));
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }

            sendMessage(chatId, generateResultMessage(history),
                    inlineKey.resultVotes(historyId));
            history.setHistoryStatus(HistoryStatus.AWAITING_APPROVED);
            history.setUpdatedAt(LocalDateTime.now());
            historyRepository.save(history);
        });
    }

    private String generateResultMessage(History history) {
        return """
                ‚ùó –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
                
                <i>%s</i>
                
                <b>‚Ä¢ –ñ–µ–ª–∞–µ–º–∞—è —Å—É–º–º–∞:</b> %s %s
                
                –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç!""".formatted(
                        history.getDescription(),
                        history.getAmount(),
                        history.getCurrency()
        );
    }

    private void sendHistory(History history) throws Exception {
        if (history.getFiles() == null || history.getFiles().isEmpty()) {
            sendMessage(groupId, generateGroupMessage(history), inlineKey.votes(history.getId()));
            return;
        }

        for (HistoryFile historyFile : history.getFiles()) {
            var type = historyFile.getFileType();
            switch (type) {
                case PHOTO -> telegramClient.execute(SendPhoto.builder()
                        .photo(new InputFile(historyFile.getTelegramFileId()))
                        .chatId(groupId)
                        .caption(generateGroupMessage(history))
                        .parseMode(ParseMode.HTML)
                        .replyMarkup(inlineKey.votes(history.getId()))
                        .build());
                case VIDEO -> telegramClient.execute(
                        SendVideo.builder()
                                .chatId(groupId)
                                .caption(generateGroupMessage(history))
                                .parseMode(ParseMode.HTML)
                                .replyMarkup(inlineKey.votes(history.getId()))
                                .video(new InputFile(historyFile.getTelegramFileId()))
                                .build());
                case DOCUMENT -> telegramClient.execute(
                        SendDocument.builder()
                                .chatId(groupId)
                                .parseMode(ParseMode.HTML)
                                .replyMarkup(inlineKey.votes(history.getId()))
                                .caption(generateGroupMessage(history))
                                .document(new InputFile(historyFile.getTelegramFileId()))
                                .build()
                );
            }
            break;
        }
    }

    private void answerCallback(String id) {
        try {
            telegramClient.execute(new AnswerCallbackQuery(id));
        } catch (TelegramApiException e) {
            log.error("Error answering callback", e);
        }
    }

    private String generateGroupMessage(History history) {
        return """
                <i>%s</i>
                
                <b>‚Ä¢ –ê–≤—Ç–æ—Ä:</b> %s
                <b>‚Ä¢ –ñ–µ–ª–∞–µ–º–∞—è —Å—É–º–º–∞</b>: %.2f %s
                
                –ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–æ –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –õ–°.
                """.formatted(
                history.getDescription(),
                history.getUser().getUsername(),
                history.getAmount(), history.getCurrency()
        );
    }

    private void sendMessage(Long chatId, String message, InlineKeyboardMarkup keyboardMarkup) {
        try {
            var sendMessage = keyboardMarkup == null ?
                    Sender.sendMessage(chatId, message) :
                    Sender.sendMessage(chatId, message, keyboardMarkup);

            telegramClient.execute(sendMessage);
        } catch (TelegramApiException e) {
            log.error("Error sendMessage PublishHistoryCommandImpl", e);
        }
    }
}
